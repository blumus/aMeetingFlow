# This SAM template defines the serverless application.
# It specifies the Lambda function, its runtime, handler, and the IAM role.
# This template is deployed by the AWS SAM CLI.

AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Email Parser Service

# We will use the outputs from our Terraform script to configure this template

Globals:
  Function:
    Tags:
      Project: meeting-automation-service
      DeployedBy: sam

Resources:
  # S3 Bucket for Email Storage (Extension of Lambda - temporary storage for processing)
  EmailStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-email-storage"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteEmailsAfter7Days
            Status: Enabled
            ExpirationInDays: 7
      Tags:
        - Key: Project
          Value: meeting-automation-service
        - Key: DeployedBy
          Value: sam

  # S3 Bucket Policy - Allow SES to write emails for Lambda processing
  EmailStorageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref EmailStorageBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ses.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub "${EmailStorageBucket.Arn}/*"
            Condition:
              StringEquals:
                'AWS:SourceAccount': !Ref 'AWS::AccountId'
          - Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource: 
              - !Sub "${EmailStorageBucket.Arn}/*"
              - !Sub "${EmailStorageBucket.Arn}"
            Condition:
              Bool:
                'aws:SecureTransport': 'false'

  # IAM Role for Lambda Function
  EmailParserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3EmailAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: !Sub "${EmailStorageBucket.Arn}/*"
        - PolicyName: SESEmailSending
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                # Restrict to only SES identities in this AWS account (prevents sending from other accounts' domains)
                Resource: 
                  - !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/*"
      Tags:
        - Key: Project
          Value: meeting-automation-service
        - Key: DeployedBy
          Value: sam

  # The Lambda Function for Email Parsing
  EmailParserFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: email_parser
      Description: Parses email content and sends reply with meeting details
      Handler: lambda_function.handler
      Runtime: python3.11
      CodeUri: ../src/
      MemorySize: 256
      Timeout: 60
      Role: !GetAtt EmailParserRole.Arn

  # Permission for SES to invoke Lambda
  EmailParserFunctionPermissionForSES:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref EmailParserFunction
      Principal: ses.amazonaws.com
      
Outputs:
  EmailParserFunctionArn:
    Description: "ARN of the Email Parser Lambda function"
    Value: !GetAtt EmailParserFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EmailParserFunctionArn"
  
  EmailStorageBucketName:
    Description: "Name of the S3 bucket for email storage"
    Value: !Ref EmailStorageBucket
    Export:
      Name: !Sub "${AWS::StackName}-EmailStorageBucketName"
